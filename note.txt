第一章、
1.高级编程语言根据执行机制不同可分成两类:静态语言和脚本语言,静态语言采用编译方式执行,脚本语言采用解释方式执行。
2.编译和解释
编译是将源代码转换成目标代码的过程,通常,源代码是高级语言代码,目标代码是机器语言代码,执行编译的计算机程序称为编译器解释是将源代码逐条转换成目标代码同时逐条运行目标代码的过程。执行解释的计算机程序称为解释器。
编译是一次性地翻译,一旦程序被编译,不再需要编译程序或者源代码。对于相同源代码,编译所产生的目标代码执行速度更快。目标代码不需要编译器就可以运行,在同类型操
作系统上使用灵活。
解释则在每次程序运行时都需要解释器和源代码。解释执行需要保留源代码,程序纠错和维护十分方便。只要存在解释器,源代码可以在任何操作系统上运行,可移植性好。
3.IPO程序编写方法
输入数据
输入(Input)是一个程序的开始。程序要处理的数据有多种来源,形成了多种输入方式,包括:文件输入、网络输入、控制台输入、交互界面输出、随机数据输入、内部参数输入等。
处理数据
处理(Process)是程序对输入数据进行计算产生输出结果的过程。计算问题的处理方法统称为“算法”,它是程序最重要的组成部分。可以说,算法是一个程序的灵魂。
输出数据
输出(Output)是程序展示运算成果的方式。程序的输出方式包括:控制台输出、图形输出、文件输出、网络输出、操作系统内部变量输出等。
4.Python程序的特点
4.1.Python具有通用性。
Python语言可以用于几乎任何与程序设计相关应用的开发,不仅适合训练变成思维,更适合诸如数据分析、机器学习、人工智能、Web开发等具体的技术领域。
4.2.Python语法简洁。
Python语法主要用来精确表达问题逻辑,更接近自然语言,只有33个保留字,十分简洁。
4.3.Python生态高产。
Python解释器提供了几百个内置类和函数库,此外,世界各地程序员通过开源社区贡献了十几万个第三方函数库,几乎覆盖了计算机技术的各个领域,编写Python程序可以大量利用已有内置或第三方代码,具备良好的编程生态。
4.4.平台无关
Python程序可以在任何安装解释器的计算机环境中执行,因此,可以不经修改地实现跨操作系统运行。
4.5.强制可读
Python通过强制缩进(类似文章段落的首行空格)来体现语句间的逻辑关系,显著提高了程序的可读性,进而增强了Python程序的可维护性。
4.6.支持中文
Python 3.x版本采用Unicode编码表达所有字符信息。Unicode是一种国际通用表达字符的编码体系,这使得Python程序可以直接支持英文、中文、法文、德文等各类自然语言字符,在处理中文时更加灵活且高效。
第二章、
5.程序的基本语法元素:程序的格式框架、缩进、注释、变量、命名、保留字、数据类型、赋值语句、引用
6.程序的格式框架
6.1缩进
Python语言采用严格的“缩进”来表明程序的格式框架。缩进指每一行代码开始前的空白区域,用来表示代码之间的包含和层次关系。1个缩进 = 4个空格。缩进是Python语言中表明程序框架的唯一手段
当表达分支、循环、函数、类等程序含义时,在if、while、for、def、class等保留字所在完整语句后通过英文冒号(:)结尾并在之后进行缩进,表明后续代码与紧邻无缩进语句的所属关系。
6.2注释
Python程序中的非注释语句将按顺序执行,注释语句将被解释器过滤掉,不被执行。注释一般用于在代码中标明作者和版权信息,或解释代码原理及用途,或通过注释单行代码辅助程序调试。
6.3变量
变量是保存和表示数据值的一种语法元素,变量的值是可以改变的,能够通过赋值(使用等号=表达)方式被修改
6.4命名
Python语言允许采用大写字母、小写字母、数字、下划线(_)和汉字等字符及其组合给变量命名,但名字的首字符不能是数字,中间不能出现空格,长度没有限制.注意:标识符对大小写敏感
6.5保留字
保留字,也称为关键字
and elif import raise
as else in return
assert except is try
break finally lambda while
class for nonlocal with
continue from not yield
def global or True
del if pass False
None
6.6数据类型　　　　　　　　　　　　　　　　　　可混合使用０~len(str)-1 or -len(str)~-1　汉字也占str一个长度　　　　　
数字类型(整数(多进制表示)、浮点数（科学计数法<a>e<b> = a*10^b）、复数)、字符串类型(两种下标)、元组类型、
集合类型、列表类型、字典类型等
6.7赋值语句
<变量> = <表达式>
<变量1>, ..., <变量N> = <表达式1>, ..., <表达式N>
6.8 input()函数
<变量> = input(<提示性文字>) 字符串
６.9 eval()
eval(<字符串>)
将字符串当成表达式执行
<变量> = eval(input(<提示性文字>))
a = eval('1+99') == exec('a=1+99')
6.10 print()
混合输出字符串与变量值,使用方式
如下:
print(<输出字符串模板>.format(<变量1>, <变量2>,..., <变量n>))
6.11 format()
以槽{}按编号顺序表示输出变量位置
可以通过format()参数的序号在模板字符串槽中指定参数的使用,参数从0开始编号
"{1}曰:学而时习之,不亦{0}。".format("说乎","孔子")
{<参数序号>: <格式控制标记>}其中,格式控制标记用来控制参数显示时的格式 。格式控制标记包括:<填充><对齐><宽度>,<.精度><类型>6个字段,这些字段都是可选的,可以组合使用
填充默认空格,要和对齐字段，宽度控制一起使用,设定宽度小于参数实际宽度按实际输出
对齐字段分别使用<、>和^三个符号表示左对齐、右对齐和居中对齐。
精度以.开头,只对浮点数和字符串有效。对于浮点数,精度表示小数部分输出的有效位数。对于字符串,精度表示输出的最大长度。小数点可以理解为对数值的有效截断。
类型：整数类型６种多进制、浮点数e/E/f/%
第三章基本数据类型、
7.数值运算操作符
7.1 x // y x与y之整数商,即:不大于x与y之商的最大整数 x为负数时，可以看成分数，往小的取负数为商，然后算余数
7.2 -x x的负值,即:x*(-1)
7.3 +x x本身
7.4 x**y x的y次幂,即:x y
7.5 上标所有二元运算操作符(+、-、*、/、//、%、**)都可以与等号(=)相连,形成增强赋值操作符(+=、-=、*=、/=、//=、%=、**=)。用op表示这些二元运算操作符,增强赋值操作符的用法如下:
x op= y 等价于 x = x op y
7.6 整数和浮点数混合运算,输出结果是浮点数
7.7 整数之间运算,产生结果类型与操作符相关,/运算的结果是浮点数
7.8 整数或浮点数与复数运算,输出结果是复数
7.9 数值运算函数 
abs(x)   x的绝对值
divmod(x, y) (x//y, x%y),输出为二元组形式(也称为元组类型)
pow(x, y[, z]) (x**y)%z,[..]表示该参数可以省略,即:pow(x,y),它与x**y相同
round(x[, ndigits]) 对x四舍五入,保留ndigits位小数。round(x)返回四舍五入的数值
max(x 1 , x 2 , ..., x n ) x 1 , x 2 , ..., x n 的最大值,n没有限定
min(x 1 , x 2 , ..., x n ) x 1 , x 2 , ..., x n 的最小值,n没有限定
7.10 多行字符串可以由一对三单引号(''')或三双引号(""")作为边界来表示,两者作用相同
7.11 Python语言转义符: \
7.12 字符串的切片
对字符串中某个子串或区间的检索被称为切片。切片的使用方式如下:<字符串或字符串变量>[N: M] 不包含M
索引从[0:len(str)] 或 [-1:-len(str)]
可以通过切片实现字符串翻转: [len(要翻转的长度)::-1(采样的间隔)] 从最后一个字符串开始,以1为间隔采len个字符实现翻转
7.13 字符串相加+ 字符串重复* 判断子串 in
7.14 处理字符串内置函数　len() str() chr() ord() hex() oct()
7.15 方法也是一个函数,只是调用方式不同。函数采用func(x)方式调用,而方法则采用<a>.func(x)形式调用。方法仅作用于前导对象<a>                                                                             具有迭代性质的变量
字符串方法:str.lower() str.upper() str.split(sep=' ') str.count(sub) str.replace(old,new) str.center(width,fillwith)={:fillwith^width} str.strip(chars)去掉左右中chars的字符，提取中心字符串 str.join(iter)
第四章　程序的控制结构
8.1 程序的三种控制结构:分支结构（异常处理）、循环结构、顺序结构
8.2 任何非零的数值、非空的数据类型都等价于True,0或空类型等价于False
8.3 循环结构包括两种:遍历循环(for in )和无限循环(while)
8.4 for in else /while else:当for/while循环正常执行之后,程序会继续执行else语句中内容。else语句只在循环正常执行之后才执行并结束,因此,可以在<语句块2>中放置判断循环执行情况的语句
第五章　函数和代码复用
9.1 函数的定义
def <函数名>(<非可选参数列表>, <可选参数> = <默认值>):
<函数体>
return <返回值列表>
调用函数时可使用的正式参数类型：必需参数
                        　 关键字参数
                           默认参数
                           不定长参数
如果需要返回值,使用保留字return和返回值列表。函数可以没有return语句,函数体结束后会将控制权返回给调用者。
9.2 函数的使用一共分为四个步骤:1. 函数定义 2. 函数调用 3. 函数执行 4. 函数返回
9.3 参数传递
可选参数一般都放置在非可选参数的后面，定义时给出默认值。Python语言同时支持函数按照参数名称方式传递参数,语法形式如下:<函数名>(<参数名> = <实际值>)
9.4 函数的返回值
函数可以没有return,此时函数并不返回值。当函数使用return返回多个值,可以使用一个变量或多个变量保存结果
9.5 变量的作用域
根据程序中变量所在的位置和作用范围,变量分为局部变量和全局变量。
全局变量指在函数之外定义的变量,在程序执行全过程有效。全部变量在函数内部使用时,需要提前使用保留字global声明,语法形式如下:global <全局变量>
如果未使用保留字global声明,即使名称相同,也不是全局变量。
第六章　组合数据类型
10.1 Python语言中最常用的组合数据类型有3大类,分别是集合类型、序列类型和映射类型。
10.2 集合类型是一个元素集合,元素之间无序,相同元素在集合中唯一存在。无序组合,用大括号({})表示,它没有索引和位置的概念
集合中元素不可重复,元素类型只能是固定数据类型,例如:整数、浮点数、字符串、元组等,列表、字典和集合类型本身都是可变数据类型,不能作为集合的元素出现。
需要注意,由于集合元素是无序的,集合的打印效果与定义顺序可以不一致。由于集合元素独一无二,使用集合类型能够过滤掉重复元素。
集合类型有4个操作符,交集(&)、并集(|)、差集(-)、补集(^),操作逻辑与数学定义相同。
操作函数或方法:s.add(x) s.remove(x) s.clear() x in s x not in s
10.3 序列类型是一个元素向量,元素之间存在先后关系,通过序号访问,元素之间不排他。序列类型的典型代表是字符串类型和列表类型元组类型。为可迭代类型。
s.index(x) s.count(x) min/max(s) s+t x in s x not in s
10.4 使用min(x)/max(x)这两个函数的前提是列表中各元素类型可以进行比较。
10.5 映射类型是“键-值”数据项的组合,每个元素是一个键值对,表示为(key, value)。映射类型的典型代表是字典类型。
在序列类型中,采用从0开始的正向递增序号进行具体元素值的索引。而映射类型则由用户来定义序号,即键,用其去索引具体的值。
键(key)表示一个属性,也可以理解为一个类别或项目,值(value)是属性的内容,键值对刻画了一个属性和它的值。键值对将映射关系结构化,用于存储和表达。
通过键索引值.min/max(d)字典d中键的最小/大值
d.keys()　d.values()　d.items()　d.get(key, default) d.pop(key, default) d.popitem() d.clear()
x in s x not in s 判断一个键是否在字典中
10.6 列表类型用中括号([])表示,也可以通过list(x)函数将集合或字符串类型转换成列表类型。
操作函数或方法:s.apppend() s.insert(i,x) s.clear() s.pop(i) s.remove(x) s.reverse() s.copy() 
除了上述方法,还可以使用Python保留字del对列表元素或片段进行删除,使用方法如下:
del <列表变量>[<索引序号>] 或 del <列表变量>[<索引起始>: <索引结束>]
第七章 文件和数据格式化
11.1 文件包括两种类型:文本文件和二进制文件。
11.2 采用文本方式读入文件,文件经过编码形成字符串,打印出有含义的字符;采用二进制方式打开文件,文件被解析为字节流。
11.3 <变量名> = open(<文件路径及文件名>, <打开模式>)
'r' 只读模式,如果文件不存在,返回异常FileNotFoundError,默认值
'w' 覆盖写模式,文件不存在则创建,存在则完全覆盖源文件
'x' 创建写模式,文件不存在则创建,存在则返回异常FileExistsError
'a' 追加写模式,文件不存在则创建,存在则在原文件最后追加内容
'b' 二进制文件模式
't' 文本文件模式,默认值
'+' 与r/w/x/a一同使用,在原功能基础上增加同时读写功能
11.4 读：f.read(size=-1) f.readline(size = -1) f.readlines(hint=-1)读前hint行 f.seek(offset) 改变当前文件操作指针的位置,offset的值:0:文件开头; 2: 文件结尾
文件打开后,对文件的读写有一个读取指针,当从文件中读入内容后,读取指针将向前进,再次读取的内容将从指针的新位置开始。
11.5 写：f.write(s) 向文件写入一个字符串或字节流 f.writelines(lines) 将一个元素为字符串的列表写入文件
11.6 逗号分割的存储格式叫做CSV格式










